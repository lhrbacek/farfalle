// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @default(autoincrement()) @id
  email     String  @unique
  name      String
  surname   String
  password  String
  address   Address @relation("UserHasAddress", fields: [addressId], references: [id])
  addressId Int
  orders    Order[]
}

model Address {
  id      Int    @default(autoincrement()) @id
  name    String
  street  String
  number  Int
  zip     Int
  city    String
  user    User?  @relation("UserHasAddress")
  orders  Order[]
}

model Play {
  id            Int     @default(autoincrement()) @id
  name          String
  description   String
  imageURL      String
  lengthMinutes Int
  director      String
  performances  Performance[]
}

model Performance {
  id        Int     @default(autoincrement()) @id
  dateTime  String
  play      Play    @relation(fields: [playId], references: [id])
  playId    Int
  venue     Venue   @relation(fields: [venueId], references: [id])
  venueId   Int
  tickets   Ticket[]
}

model Venue {
  id           Int     @default(autoincrement()) @id
  name         String
  rows         Int
  cols         Int
  performances Performance[]
}

model Ticket { 
  id               Int    @default(autoincrement()) @id
  price            Int
  row              Int
  seat             Int
  status           StatusTicket
  order            Order? @relation(fields: [orderId], references: [id])
  orderId          Int?
  performance      Performance @relation(fields: [performanceId], references: [id])
  performanceId    Int
}

enum StatusTicket {
  FREE
  RESERVED
  SOLD
}

model Order {
  id         Int       @id @default(autoincrement())
  status     StatusOrder
  email      String
  createdAt  DateTime  @default(now())
  tickets    Ticket[]
  adress     Address   @relation(fields: [adressId], references: [id])
  adressId   Int
  user       User?     @relation(fields: [userId], references: [id])
  userId     Int? 
}

enum StatusOrder {
  UNCONFIRMED
  UNPAID
  PAID
}
